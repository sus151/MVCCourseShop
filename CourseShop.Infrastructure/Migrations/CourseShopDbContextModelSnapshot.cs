// <auto-generated />
using System;
using CourseShop.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseShop.Infrastructure.Migrations
{
    [DbContext(typeof(CourseShopDbContext))]
    partial class CourseShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.HighlightedCategory", b =>
                {
                    b.Property<int>("IdHighlightedCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHighlightedCategory"));

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.HasKey("IdHighlightedCategory");

                    b.HasIndex("IdCategory");

                    b.ToTable("HighlightedCategories");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.News", b =>
                {
                    b.Property<int>("IdNews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNews"));

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int");

                    b.Property<int?>("IdMainCategory")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PhotoSmall")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdNews");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdMainCategory");

                    b.ToTable("News", t =>
                        {
                            t.HasComment("Upewnij się, że tylko jedno z pól IdCourse, IdCategory, IdMainCategory ma wartość");

                            t.HasCheckConstraint("CK_News_OneIdNotNull", "([IdCourse] IS NOT NULL AND [IdCategory] IS NULL AND [IdMainCategory] IS NULL) OR ([IdCourse] IS NULL AND [IdCategory] IS NOT NULL AND [IdMainCategory] IS NULL) OR ([IdCourse] IS NULL AND [IdCategory] IS NULL AND [IdMainCategory] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.Page", b =>
                {
                    b.Property<int>("IdPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPage"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdReference")
                        .HasColumnType("int");

                    b.HasKey("IdPage");

                    b.HasIndex("IdReference");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.PromotedItem", b =>
                {
                    b.Property<int>("IdPromotedItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPromotedItem"));

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int");

                    b.Property<int?>("IdMainCategory")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdPromotedItem");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdMainCategory");

                    b.ToTable("PromotedItems", t =>
                        {
                            t.HasComment("Upewnij się, że tylko jedno z pól IdCourse, IdCategory, IdMainCategory ma wartość");

                            t.HasCheckConstraint("CK_PromotedItems_OneIdNotNull", "([IdCourse] IS NOT NULL AND [IdCategory] IS NULL AND [IdMainCategory] IS NULL) OR ([IdCourse] IS NULL AND [IdCategory] IS NOT NULL AND [IdMainCategory] IS NULL) OR ([IdCourse] IS NULL AND [IdCategory] IS NULL AND [IdMainCategory] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.Reference", b =>
                {
                    b.Property<int>("IdReference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReference"));

                    b.Property<string>("MainTittle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PageTittle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdReference");

                    b.ToTable("References");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.HasKey("Id", "IdCourse");

                    b.HasIndex("IdCourse");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("IdMainCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCategory");

                    b.HasIndex("IdMainCategory");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Course", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourse"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("Date");

                    b.Property<byte[]>("CoursePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int>("IdDifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("IdCourse");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdDifficultyLevel");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.CourseStep", b =>
                {
                    b.Property<int>("IdCourseStep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourseStep"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCourseStep");

                    b.HasIndex("IdCourse");

                    b.ToTable("CourseSteps");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.DifficultyLevel", b =>
                {
                    b.Property<int>("IdDifficultyLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDifficultyLevel"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdDifficultyLevel");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.FavoriteCourses", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.HasKey("Id", "IdCourse");

                    b.HasIndex("IdCourse");

                    b.ToTable("FavoriteCourses");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Opinion", b =>
                {
                    b.Property<int>("IdOpinion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOpinion"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int?>("IdCourse")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("IdOpinion");

                    b.HasIndex("IdCourse");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.HighlightedCategory", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "Category")
                        .WithMany()
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.News", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "Category")
                        .WithMany()
                        .HasForeignKey("IdCategory");

                    b.HasOne("CourseShop.Domain.Entities.Shop.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse");

                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "MainCategory")
                        .WithMany()
                        .HasForeignKey("IdMainCategory");

                    b.Navigation("Category");

                    b.Navigation("Course");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.Page", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.CMS.Reference", "Reference")
                        .WithMany()
                        .HasForeignKey("IdReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.CMS.PromotedItem", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "Category")
                        .WithMany()
                        .HasForeignKey("IdCategory");

                    b.HasOne("CourseShop.Domain.Entities.Shop.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse");

                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "MainCategory")
                        .WithMany()
                        .HasForeignKey("IdMainCategory");

                    b.Navigation("Category");

                    b.Navigation("Course");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Cart", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.ApplicationUser", "User")
                        .WithMany("UserCart")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShop.Domain.Entities.Shop.Course", "Course")
                        .WithMany("UserCart")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Category", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("IdMainCategory");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Course", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShop.Domain.Entities.Shop.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Courses")
                        .HasForeignKey("IdDifficultyLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DifficultyLevel");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.CourseStep", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Course", "Course")
                        .WithMany("CourseSteps")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.FavoriteCourses", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.ApplicationUser", "User")
                        .WithMany("FavoriteCourses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShop.Domain.Entities.Shop.Course", "Course")
                        .WithMany("UserFavorites")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Opinion", b =>
                {
                    b.HasOne("CourseShop.Domain.Entities.Shop.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IdCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Category", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.Course", b =>
                {
                    b.Navigation("CourseSteps");

                    b.Navigation("UserCart");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.DifficultyLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CourseShop.Domain.Entities.Shop.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteCourses");

                    b.Navigation("UserCart");
                });
#pragma warning restore 612, 618
        }
    }
}
